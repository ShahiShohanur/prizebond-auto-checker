<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <title>Prizebond Auto Checker</title>
    <script src="https://cdn.tailwindcss.com"></script>
  </head>
  <body class="bg-slate-50 min-h-screen text-slate-800">
    <div class="max-w-4xl mx-auto p-6 space-y-6">
      <h1 class="text-4xl font-bold mb-4">Prizebond Auto Checker</h1>

      <section>
        <h2 class="text-2xl font-semibold mb-2">Select Your JSON Bond Files</h2>
        <div id="json-files" class="grid grid-cols-2 gap-3 max-h-48 overflow-y-auto border rounded p-3 bg-white"></div>

        <!-- Manual input -->
        <div class="mt-6">
          <label for="manual-bonds" class="block font-semibold mb-1"
            >Or enter your bonds manually (one per line):</label
          >
          <textarea
            id="manual-bonds"
            rows="6"
            class="w-full p-2 border rounded resize-none"
            placeholder="Type or paste bond numbers, one per line"></textarea>
        </div>

        <!-- Bond count display -->
        <div id="bond-count" class="mt-3 p-3 bg-indigo-100 text-indigo-800 rounded font-semibold hidden"></div>

        <div class="mt-3 flex gap-2">
          <button id="btn-select-all" class="px-3 py-1 border rounded">Select All</button>
          <button id="btn-clear-all" class="px-3 py-1 border rounded">Clear All</button>
          <button id="btn-start-check" class="ml-auto px-4 py-2 bg-indigo-600 text-white rounded hover:bg-indigo-700">
            Start Auto Check
          </button>
        </div>
      </section>

      <section id="results" class="mt-6 space-y-4"></section>
    </div>

    <script>
      async function api(path, opts) {
        const res = await fetch(path, opts);
        if (!res.ok) {
          try {
            const json = await res.json();
            throw new Error(json.error || res.statusText);
          } catch {
            throw new Error(res.statusText);
          }
        }
        return res.json();
      }

      const jsonFilesEl = document.getElementById('json-files');
      const resultsEl = document.getElementById('results');
      const btnSelectAll = document.getElementById('btn-select-all');
      const btnClearAll = document.getElementById('btn-clear-all');
      const btnStartCheck = document.getElementById('btn-start-check');
      const bondCountEl = document.getElementById('bond-count');
      const manualBondsEl = document.getElementById('manual-bonds');

      function renderJsonFiles(files) {
        if (files.length === 0) {
          jsonFilesEl.innerHTML = '<div class="text-center text-slate-500">No JSON files found.</div>';
          btnStartCheck.disabled = true;
          return;
        }
        jsonFilesEl.innerHTML = '';
        for (const f of files) {
          const id = 'f-' + btoa(f).replace(/=/g, '');
          jsonFilesEl.innerHTML += `
      <label class="flex items-center gap-2 p-2 border rounded cursor-pointer bg-white hover:bg-indigo-50">
        <input type="checkbox" class="json-checkbox" id="${id}" data-name="${f}" />
        <span class="truncate">${f}</span>
      </label>
    `;
        }
        btnStartCheck.disabled = false;
      }

      function getSelectedJsonFiles() {
        return Array.from(document.querySelectorAll('.json-checkbox'))
          .filter((chk) => chk.checked)
          .map((chk) => chk.dataset.name);
      }

      btnSelectAll.onclick = () => {
        document.querySelectorAll('.json-checkbox').forEach((chk) => (chk.checked = true));
      };

      btnClearAll.onclick = () => {
        document.querySelectorAll('.json-checkbox').forEach((chk) => (chk.checked = false));
        manualBondsEl.value = '';
        resultsEl.innerHTML = '';
        bondCountEl.textContent = '';
        bondCountEl.classList.add('hidden');
      };

      btnStartCheck.onclick = async () => {
        const selectedFiles = getSelectedJsonFiles();

        // Parse manual bonds input: split lines, trim, filter empty
        const manualBonds = manualBondsEl.value
          .split('\n')
          .map((b) => b.trim())
          .filter((b) => b !== '');

        if (selectedFiles.length === 0 && manualBonds.length === 0) {
          alert('Please select at least one JSON file or enter bonds manually');
          return;
        }

        resultsEl.innerHTML = `<div class="p-4 text-center text-slate-500">Loading your bond numbers...</div>`;
        btnStartCheck.disabled = true;

        try {
          let myBonds = [];

          if (selectedFiles.length > 0) {
            // Load bonds from JSON files
            const bondRes = await api('/api/load-my-bonds', {
              method: 'POST',
              headers: { 'Content-Type': 'application/json' },
              body: JSON.stringify({ files: selectedFiles }),
            });
            myBonds = bondRes.numbers || [];
          }

          // Combine manual bonds with loaded bonds, removing duplicates
          const combinedBonds = Array.from(new Set([...myBonds, ...manualBonds]));

          if (combinedBonds.length === 0) {
            resultsEl.innerHTML = `<div class="p-4 text-center text-yellow-600">No bond numbers found from JSON files or manual input.</div>`;
            bondCountEl.textContent = '';
            bondCountEl.classList.add('hidden');
            btnStartCheck.disabled = false;
            return;
          }

          // Show total bonds count
          bondCountEl.textContent = `Your total bonds: ${combinedBonds.length}`;
          bondCountEl.classList.remove('hidden');

          resultsEl.innerHTML = `<div class="p-4 text-center text-slate-500">Fetching last 10 prizebond draws...</div>`;

          // Fetch last 10 draws
          const drawsRes = await api('/api/fetch-last-10');
          if (!drawsRes.success || !drawsRes.draws.length) {
            resultsEl.innerHTML = `<div class="p-4 text-center text-yellow-600">No prizebond draws found.</div>`;
            btnStartCheck.disabled = false;
            return;
          }

          // Auto-check matches
          resultsEl.innerHTML = `<div class="p-4 text-center text-slate-500">Checking for matches...</div>`;
          const checkRes = await api('/api/auto-check', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ myBonds: combinedBonds, draws: drawsRes.draws }),
          });

          if (!checkRes.success) {
            resultsEl.innerHTML = `<div class="p-4 text-center text-red-600">Error: ${
              checkRes.error || 'Unknown error'
            }</div>`;
            btnStartCheck.disabled = false;
            return;
          }

          const found = checkRes.foundInDraws;
          if (Object.keys(found).length === 0) {
            resultsEl.innerHTML = `<div class="p-4 text-center text-yellow-600">No matches found in last 10 draws.</div>`;
          } else {
            let html = `<div class="p-4 bg-green-100 text-green-800 rounded font-semibold">Matches Found:</div>`;
            for (const bond in found) {
              html += `<div class="mt-2"><strong>${bond}</strong> found in: `;
              html += found[bond]
                .map((f) => `<a href="${f.url}" target="_blank" class="underline text-indigo-700">Draw #${f.draw}</a>`)
                .join(', ');
              html += `</div>`;
            }
            resultsEl.innerHTML = html;
          }
        } catch (e) {
          resultsEl.innerHTML = `<div class="p-4 text-center text-red-600">Error: ${e.message}</div>`;
        } finally {
          btnStartCheck.disabled = false;
        }
      };

      (async () => {
        // load JSON files on page load
        try {
          const res = await api('/api/json-files');
          renderJsonFiles(res.files || []);
        } catch {
          jsonFilesEl.innerHTML = '<div class="text-center text-red-600">Failed to load JSON files.</div>';
          btnStartCheck.disabled = true;
        }
      })();
    </script>
  </body>
</html>
